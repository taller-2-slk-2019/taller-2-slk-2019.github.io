/:
    get:
        description: "Get channels for an user and an organization"
        queryParameters:
            userToken:
                description: "The user for which to fetch the channels. If not set returns all channels"
                required: false
                type: string
                example: "abcdefghijk123"
            organizationId:
                description: "The organization for which to fetch the channels"
                required: true
                type: integer
                example: 6
            userIsMember:
                description: "If true, returns only channels which the user belongs to. If false, returns public channels which the user does not belong. Default true."
                required: false
                type: boolean
                example: false
        responses:
            200:
                body:
                    type: responseChannel[]
                    example: !include examples/channelsListResponse.json
            400:
                !include ../errorResponse.raml
                
    post:
        description: "Create a channel"
        queryParameters:
            userToken:
                description: "The channel's creator"
                required: false
                type: string
                example: "abcdefghijk123"
            adminToken:
                description: "The admin"
                required: false
                type: string
                example: "abdasdasd3"
        body:
            type: requestChannelCreate
            example: !include examples/channelsCreateRequest.json
        responses:
            200:
                body:
                    type: responseChannel
                    example: !include examples/channelsCreateResponse.json
            400:
                !include ../errorResponse.raml

/{id}:
    get:
        description: "Get channel info"
        responses:
            200:
                body:
                    type: responseChannel
                    example: !include examples/channelResponse.json
            400:
                !include ../errorResponse.raml

    put:
        description: "Update a channel"
        queryParameters:
            adminToken:
                description: The admin token
                required: false
                type: string
                example: "dasfdsaf6546"
            userToken:
                description: "The user who makes the action"
                required: false
                type: string
                example: "abcdefghijk123"
        body:
            type: requestChannel
            example: !include examples/channelsUpdateRequest.json
        responses:
            204:
            400:
                !include ../errorResponse.raml

    delete:
        description: "Deletes channel"
        queryParameters:
            adminToken:
                description: The admin token
                required: false
                type: string
                example: "dasfdsaf6546"
            userToken:
                description: "The user who makes the action"
                required: false
                type: string
                example: "abcdefghijk123"
        responses:
            204:
            400:
                !include ../errorResponse.raml

/{id}/users:
    get:
        description: "Get users that belong to channel"
        responses:
            200:
                body:
                    type: responseUser[]
                    example: !include examples/channelUsersResponse.json
            400:
                !include ../errorResponse.raml

    post:
        description: "Add an user to the channel. If userId is not set, adds the current user to the channel"
        queryParameters:
            adminToken:
                description: The admin token
                required: false
                type: string
                example: "dasfdsaf6546"
            userToken:
                description: "The user who makes the action"
                required: false
                type: string
                example: "abcdefghijk123"
        body:
            type: requestUserId
            example: !include examples/userIdRequest.json
        responses:
            204:
            400:
                !include ../errorResponse.raml

    delete:
        description: "Abandon the channel"
        queryParameters:
            userToken:
                description: "The user who wants to abandon the channel"
                required: true
                type: string
                example: "abcdefghijk123"
        responses:
            204:
            400:
                !include ../errorResponse.raml

/{id}/new-users:
    get:
        description: "Get users that don't belong to channel"
        responses:
            200:
                body:
                    type: responseUser[]
                    example: !include examples/channelUsersResponse.json
            400:
                !include ../errorResponse.raml

/{id}/users/{userId}:
    delete:
        description: "Remove an user from the channel"
        queryParameters:
            adminToken:
                description: The admin token
                required: false
                type: string
                example: "dasfdsaf6546"
            userToken:
                description: "The user who makes the action"
                required: false
                type: string
                example: "abcdefghijk123"
        responses:
            204:
            400:
                !include ../errorResponse.raml

/{id}/statistics:
    get:
        description: "Get channel statistics"
        responses:
            200:
                body:
                    type: responseChannelStatistics
                    example: !include examples/channelStatisticsResponse.json
            400:
                !include ../errorResponse.raml